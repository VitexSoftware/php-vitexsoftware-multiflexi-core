<?php

declare(strict_types=1);

/**
 * This file is part of the MultiFlexi package
 *
 * https://multiflexi.eu/
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\MultiFlexi;

use MultiFlexi\User;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2023-11-07 at 13:03:36.
 */
class UserTest extends \PHPUnit\Framework\TestCase
{
    protected User $object;
    protected function setUp(): void
    {
        $this->object = new User();
        $this->object->loginColumn = 'login';
        $this->object->passwordColumn = 'password';
    }

    protected function tearDown(): void
    {
        $this->object = null;
    }

    public function testgetIcon(): void
    {
        // Test default icon (when no custom icon is set)
        $defaultIcon = $this->object->getIcon();
        $this->assertStringStartsWith('data:image/svg+xml;base64,', $defaultIcon);

        // Test custom icon
        $customIcon = 'https://example.com/custom.png';
        $this->object->setSettingValue('icon', $customIcon);
        $this->assertEquals($customIcon, $this->object->getIcon());
    }

    /**
     * @covers \MultiFlexi\User::getId
     */
    public function testgetId(): void
    {
        $this->assertIsInt($this->object->getId());
    }

    /**
     * @covers \MultiFlexi\User::getUserName
     */
    public function testgetUserName(): void
    {
        // Test with only login
        $login = 'testuser';
        $this->object->setDataValue('login', $login);
        $this->assertEquals($login, $this->object->getUserName());

        // Test with first and last name
        $firstName = 'John';
        $lastName = 'Doe';
        $this->object->setDataValue('firstname', $firstName);
        $this->object->setDataValue('lastname', $lastName);
        $this->assertEquals($firstName.' '.$lastName, $this->object->getUserName());
    }

    /**
     * @covers \MultiFlexi\User::getEmail
     */
    public function testgetEmail(): void
    {
        // Test with no email set
        $this->assertNull($this->object->getEmail());

        // Test with email set
        $email = 'test@example.com';
        $this->object->setDataValue('email', $email);
        $this->assertEquals($email, $this->object->getEmail());
    }

    /**
     * @covers \MultiFlexi\User::tryToLogin
     */
    public function testtryToLogin(): void
    {
        $this->markTestIncomplete('Requires Entity Manager for message logging; skip in unit test.');
    }

    /**
     * @covers \MultiFlexi\User::passwordValidation
     */
    public function testpasswordValidation(): void
    {
        // Test with empty credentials
        $this->assertFalse($this->object->passwordValidation('', ''));

        // Test with invalid format
        $this->assertFalse($this->object->passwordValidation('password', 'invalid_hash'));

        // Test with valid format but wrong password
        $hash = $this->object->encryptPassword('correct_password');
        $this->assertFalse($this->object->passwordValidation('wrong_password', $hash));

        // Test with correct password
        $password = 'correct_password';
        $hash = $this->object->encryptPassword($password);
        $this->assertTrue($this->object->passwordValidation($password, $hash));
    }

    /**
     * @covers \MultiFlexi\User::loginSuccess
     */
    public function testloginSuccess(): void
    {
        // This test requires database access
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    /**
     * @covers \MultiFlexi\User::logout
     */
    public function testlogout(): void
    {
        $this->markTestIncomplete('Requires Entity Manager for SQL logger; skip in unit test.');
    }

    /**
     * @covers \MultiFlexi\User::encryptPassword
     */
    public function testencryptPassword(): void
    {
        $password = 'test_password';
        $hash = $this->object->encryptPassword($password);

        // Check hash format (should be md5hash:salt)
        $this->assertMatchesRegularExpression('/^[a-f0-9]{32}:[a-f0-9]{2}$/', $hash);

        // Verify that the same password with the same salt produces the same hash
        [$hash1, $salt] = explode(':', $hash);
        $hash2 = md5($salt.$password);
        $this->assertEquals($hash1, $hash2);
    }

    /**
     * @covers \MultiFlexi\User::passwordChange
     */
    public function testpasswordChange(): void
    {
        $this->markTestIncomplete('This test requires database implementation.');
    }

    /**
     * @covers \MultiFlexi\User::singleton
     */
    public function testsingleton(): void
    {
        // Test first instance
        $instance1 = User::singleton();
        $this->assertInstanceOf(User::class, $instance1);

        // Test second instance is the same
        $instance2 = User::singleton();
        $this->assertSame($instance1, $instance2);

        // Test with a specific user
        $newUser = new User();
        $instance3 = User::singleton($newUser);
        $this->assertSame($instance1, $instance3); // Should still return the first instance
    }

    /**
     * Database-related tests marked as incomplete until proper database setup is implemented.
     */
    public function testsetUpDb(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testpdoConnect(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testgetPdo(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testgetFluentPDO(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testlistingQuery(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testgetColumnsFromSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testgetDataFromSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testloadFromSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testdbreload(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testdbsync(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testupdateToSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testsaveToSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testinsertToSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testdeleteFromSQL(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    public function testtakeToData(): void
    {
        $this->markTestIncomplete('This test requires database setup to be implemented.');
    }

    /**
     * @covers \MultiFlexi\User::getMyTable
     */
    public function testgetMyTable(): void
    {
        $this->assertEquals('user', $this->object->myTable);
    }

    /**
     * @covers \MultiFlexi\User::setMyTable
     */
    public function testsetMyTable(): void
    {
        $this->object->myTable = 'test_table';
        $this->assertEquals('test_table', $this->object->myTable);
    }
}
